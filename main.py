import copy

# 0
# 00
it1 = {'id': '1', 'num': 3, 'pattern': [((0, -1), (1, 0)), ((1, 0), (0, 1)), ((0, 1), (-1, 0)), ((-1, 0), (0, -1))]}

# 00
# 00
it2 = {'id': '2', 'num': 4, 'pattern': [((1, 0), (1, 1), (0, 1))]}

# 0000
it3 = {'id': '3', 'num': 4, 'pattern': [((0, 1), (0, 2), (0, 3)), ((1, 0), (2, 0), (3, 0))]}

# 0
# 000
it4 = {'id': '4', 'num': 4, 'pattern': [((0, -1), (1, 0), (2, 0)), ((0, 1), (1, 0), (2, 0)),
                                        ((1, 0), (0, 1), (0, 2)), ((-1, 0), (0, 1), (0, 2)),
                                        ((0, 1), (-1, 0), (-2, 0)), ((0, -1), (-1, 0), (-2, 0)),
                                        ((-1, 0), (0, -1), (0, -2)), ((1, 0), (0, -1), (0, -2))]}
#  0
# 000
#  0
it5 = {'id': '5', 'num': 5, 'pattern': [((0, -1), (1, 0), (0, 1), (-1, 0))]}

# 00
# 000
it6 = {'id': '6', 'num': 5, 'pattern': [((0, -1), (1, 0), (1, 1), (0, 1)), ((0, -1), (1, 0), (1, -1), (0, 1)),
                                        ((1, 0), (0, 1), (-1, 1), (-1, 0)), ((1, 0), (0, 1), (1, 1), (-1, 0)),
                                        ((0, 1), (-1, 0), (-1, -1), (0, -1)), ((0, 1), (-1, 0), (-1, 1), (0, -1)),
                                        ((-1, 0), (0, -1), (1, -1), (1, 0)), ((-1, 0), (0, -1), (-1, -1), (1, 0))]}

# 0
# 0000
it7 = {'id': '7', 'num': 5, 'pattern': [((0, -1), (1, 0), (2, 0), (3, 0)), ((0, 1), (1, 0), (2, 0), (3, 0)),
                                        ((1, 0), (0, 1), (0, 2), (0, 3)), ((-1, 0), (0, 1), (0, 2), (0, 3)),
                                        ((0, 1), (-1, 0), (-2, 0), (-3, 0)), ((0, -1), (-1, 0), (-2, 0), (-3, 0)),
                                        ((-1, 0), (0, -1), (0, -2), (0, -3)), ((1, 0), (0, -1), (0, -2), (0, -3))]}
# 0
# 0
# 000
it8 = {'id': '8', 'num': 5, 'pattern': [((0, -1), (0, -2), (1, 0), (2, 0)), ((1, 0), (2, 0), (0, 1), (0, 2)),
                                        ((0, 1), (0, 2), (-1, 0), (-2, 0)), ((-1, 0), (-2, 0), (0, -1), (0, -2))]}

# 00
# 0
# 00
it9 = {'id': '9', 'num': 5, 'pattern': [((0, -1), (1, -1), (0, 1), (1, 1)), ((0, -1), (-1, -1), (0, 1), (-1, 1)),
                                        ((1, 0), (1, 1), (-1, 0), (-1, 1)), ((1, 0), (1, -1), (-1, 0), (-1, -1))]}

#  0
# 0000
it10 = {'id': 'A', 'num': 5, 'pattern': [((0, -1), (1, 0), (2, 0), (-1, 0)), ((0, 1), (1, 0), (2, 0), (-1, 0)),
                                         ((1, 0), (0, 1), (0, 2), (0, -1)), ((-1, 0), (0, 1), (0, 2), (0, -1)),
                                         ((0, 1), (-1, 0), (-2, 0), (1, 0)), ((0, -1), (-1, 0), (-2, 0), (1, 0)),
                                         ((-1, 0), (0, -1), (0, -2), (0, 1)), ((1, 0), (0, -1), (0, -2), (0, 1))]}

# 00
#  000
it11 = {'id': 'B', 'num': 5, 'pattern': [((0, -1), (1, 0), (2, 0), (-1, -1)), ((0, 1), (1, 0), (2, 0), (-1, 1)),
                                         ((1, 0), (0, 1), (0, 2), (1, -1)), ((-1, 0), (0, 1), (0, 2), (-1, -1)),
                                         ((0, 1), (-1, 0), (-2, 0), (1, 1)), ((0, -1), (-1, 0), (-2, 0), (1, -1)),
                                         ((-1, 0), (0, -1), (0, -2), (-1, 1)), ((1, 0), (0, -1), (0, -2), (1, 1))]}

# 00
#  00
#   0
it12 = {'id': 'C', 'num': 5, 'pattern': [((0, -1), (-1, -1), (1, 0), (1, 1)), ((0, 1), (-1, 1), (1, 0), (1, -1)),
                                         ((-1, 0), (-1, -1), (0, 1), (1, 1)), ((-1, 0), (-1, 1), (0, -1), (1, -1))]}

components = [it1, it2, it3, it4, it5, it6, it7, it8, it9, it10, it11, it12]

O = '0'
X = 'X'

tmap = [
    [O],
    [O, O],
    [O, O, O],
    [O, O, O, O],
    [X, X, X, X, X],
    [X, X, X, X, X, X],
    [X, X, X, X, X, X, X],
    [X, X, X, X, X, X, X, X],
    [X, X, X, X, X, X, X, X, X],
    [X, X, X, X, X, X, X, X, X, X]
]
unused = [it6, it10]


def printmap(pmap):
    for row in pmap:
        print(row)


def dfs(mp, cp):
    # print('============== mp:')
    # printmap(mp)
    for i, row in enumerate(mp):
        for j, m in enumerate(row):
            if mp[i][j] != O:
                continue
            for pt in unused[cp]['pattern']:
                tmp = copy.deepcopy(mp)
                done = 1
                for dot in pt:
                    x = j + dot[0]
                    y = i + dot[1]
                    try:
                        if y < 0 or y >= 10 or x < 0 or x >= len(mp[y]) or tmp[y][x] != O:
                            done = 0
                            break
                    except Exception as e:
                        print(e)
                        print(i, j)
                        print(cp)
                        print(unused[cp])
                        print('pt: ', pt)
                        print('dot: ', dot)
                        print(x, y)

                        exit(1)
                    tmp[y][x] = unused[cp]['id']
                if not done:
                    continue
                tmp[i][j] = unused[cp]['id']
                if cp + 1 >= len(unused):
                    print('************* answer *************')
                    printmap(tmp)
                    print()
                    return
                dfs(tmp, cp + 1)


if __name__ == '__main__':
    # import sys
    #
    # sys.stdout = open("ouput.txt", "w")
    questions = {
        '1': {
            'tmap': [
                [O],
                [O, O],
                [O, O, O],
                [O, O, O, O],
                [X, X, X, X, X],
                [X, X, X, X, X, X],
                [X, X, X, X, X, X, X],
                [X, X, X, X, X, X, X, X],
                [X, X, X, X, X, X, X, X, X],
                [X, X, X, X, X, X, X, X, X, X]
            ],
            'unused': [it6, it10]
        },
        '469': {
            'tmap': [
                [O],
                [O, O],
                [O, O, O],
                [O, O, O, O],
                [O, O, O, O, O],
                [O, O, O, O, O, O],
                [X, X, O, O, O, O, X],
                [X, X, X, O, O, O, X, X],
                [X, X, X, X, O, X, X, X, X],
                [X, X, X, X, X, X, X, X, X, X]
            ],
            'unused': [it2, it5, it6, it8, it9, it10]
        },
        '527': {
            'tmap': [
                [O],
                [O, O],
                [O, O, O],
                [O, O, O, O],
                [O, O, O, O, O],
                [O, O, O, O, O, X],
                [O, O, O, O, O, X, X],
                [O, O, O, O, O, X, X, X],
                [X, O, O, O, O, X, X, X, X],
                [X, X, X, X, X, X, X, X, X, X]
            ],
            'unused': [it10, it2, it5, it9, it12, it7, it6]
        },
        '588': {
            'tmap': [
                [O],
                [O, O],
                [O, O, O],
                [O, O, O, O],
                [X, X, X, O, O],
                [X, X, X, X, O, O],
                [X, X, X, X, O, O, O],
                [X, X, X, X, O, O, O, O],
                [X, X, X, X, O, O, O, O, O],
                [X, X, X, X, O, O, O, O, O, O]
            ],
            'unused': [it1, it2, it6, it7, it10, it11, it12]
        },
    }

    question = '588'

    print('start solve question: ', question)
    tmap = questions[question]['tmap']
    unused = questions[question]['unused']
    dfs(tmap, 0)
    print('done.')
